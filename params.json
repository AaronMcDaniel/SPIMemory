{"name":"SPIFlash","tagline":"SPI library for Winbond Flash Memory modules","body":"# SPIFlash [![Build Status](https://travis-ci.org/Marzogh/SPIFlash.svg?branch=master)](https://travis-ci.org/Marzogh/SPIFlash)\r\n### Arduino library for Winbond Flash Memory Chips\r\n<sup> Download the latest stable release (v2.0.0) from <a href = \"https://github.com/Marzogh/SPIFlash/releases/latest\">here</a>. Please report any bugs in issues.</sup>\r\n\r\nThis library is for the Winbond serial flash memory chips. In its current form it enables reading and writing of most types of data; sector, block and chip erase; and powering down for low power operation.\r\n\r\n- For details of the Winbond Flash chips compatible with this library please refer to the Excel spreadsheet in the Extras folder.\r\n\r\n## Installation\r\n- Click on the 'Download zip' button to the right.\r\n- Unzip the archive and rename resulting folder to 'SPIFlash'\r\n- Move the folder to your libraries folder (~/sketches/libraries)\r\n\r\n## Usage\r\n\r\nThe library is called by declaring the```SPIFLASH flash(csPin)``` constructor where 'flash' can be replaced by a user constructor of choice and 'csPin' is the Chip Select pin for the flash module.\r\nMake sure to include ```#include<SPI.H>``` when you include ```#include<SPIFlash.h>```.\r\nAlso make sure to include ```flash.begin()``` in ```void setup()```. This enables the library to detect the type of flash chip installed and load the right parameters.\r\n\r\n#### Notes on Address overflow and Error checking\r\n- The library has Address overflow enabled by default - i.e. if the last address read/written from/to,  in any function, is 0xFFFFF then, the next address read/written from/to is 0x00000. This can be disabled by setting the optional last 'overflow' argument in the constructor to false - For eg. call the constructor  ```SPIFlash(csPin, false)```  instead of ```SPIFlash(csPin)```.\r\n- All write functions have Error checking turned on by default - i.e. every byte written to the flash memory will be checked against the data stored on the Arduino. Users who require greater write speeds can disable this function by setting an optional last 'errorCheck' argument in any write function to false - For eg. call the function ```writePage(page_number, *data_buffer, false)``` instead of ```writePage(page_number, *data_buffer)```.\r\n\r\nThe library enables the following functions:\r\n<hr>\r\n### Primary commands\r\n#### begin()\r\nMust be called at the start in setup(). This function detects the type of chip being used and sets parameters accordingly.\r\n#### getID()\r\nFetches the JEDEC ID as a 32-bit value.\r\n#### getCapacity()\r\nReturns the capacity as a 32-bit value.\r\n#### getmaxPage()\r\nReturns the maximum number of pages in the flash memory as a 32-bit value.\r\n#### getAddress()\r\nGets the next available address for use. Has two variants:\r\n* Takes the size of the data as an argument and returns a 32-bit address\r\n* Takes a three variables, the size of the data and two other variables to return a page number value & an offset into.\r\n\r\nAll addresses in the in the sketch must be obtained via this function or not at all.\r\n<hr>\r\n### Read commands\r\nAll read commands take a last boolean argument 'fastRead'. This argument defaults to FALSE, but when set to TRUE carries out the Fast Read instruction so data can be read at up to the memory's maximum frequency.\r\n\r\nAll read commands can take a 32-bit address variable instead of the 16-bit page number & 8-bit offset variables\r\n#### readAnything(page_number, offset, value)\r\nReads _any type of variable/struct_ (any sized value) from a specific location on a page. Takes the page number (0-maxPage), the offset of the data within page (0-255) and the variable/struct to write the data back to, as arguments.\r\n#### readByte(page_number, offset)\r\nReads a _byte_ (unsigned 8 bit value) from a specific location on a page. Takes the page number (0-maxPage) and offset of the byte within page (0-255) as arguments.\r\n#### readChar(page_number, offset)\r\nReads a _char_ (signed 8 bit value) from a specific location on a page. Takes the page number (0-maxPage) and offset of the char within page (0-255) as arguments.\r\n#### readWord(page_number, offset)\r\nReads a _word_ (unsigned 16 bit value) from a specific location on a page. Takes the page number (0-maxPage) and offset of the word within page (0-255) as arguments.\r\n#### readShort(page_number, offset)\r\nReads a _short_ (signed 16 bit value) from a specific location on a page. Takes the page number (0-maxPage) and offset of the short within page (0-255) as arguments.\r\n#### readULong(page_number, offset)\r\nReads an _unsigned long_ (unsigned 32 bit value) from a specific location on a page. Takes the page number (0-maxPage) and offset of the unsigned long within page (0-255) as arguments.\r\n#### readLong(page_number, offset)\r\nReads a _long_ (signed 32 bit value) from a specific location on a page. Takes the page number (0-maxPage) and offset of the long within page (0-255) as arguments.\r\n#### readFloat(page_number, offset)\r\nReads a _float_ (decimal value) from a specific location on a page. Takes the page number (0-maxPage) and offset of the float within page (0-255) as arguments.\r\n#### readStr(page_number, offset, outputStr)\r\nReads a _string_ (String Object) to a specific location on a page to an outputStr variable. Takes the page number (0-maxPage), the offset of the String within page (0-255) and a String as arguments.\r\n#### readPage(page_number, *data_buffer)\r\nReads a page worth of data into a data buffer array for further use. ```uint8_t data_buffer[256];``` The data buffer **must** be an array of 256 bytes.\r\n#### readAnything(page_number, offset, value)\r\nReads _any type of variable/struct_ (any sized value) from a specific location on a page. Takes the page number (0-maxPage), the offset of the data within page (0-255) and the variable/struct to write the data to, as arguments.\r\n<hr>\r\n### Write commands\r\nAll write commands take a boolean last argument 'errorCheck'. This argument defaults to TRUE, but when set to FALSE will more than double the writing speed. This however comes at the cost of checking for writing errors. Use with care.\r\n\r\nAll write commands can take a 32-bit address variable instead of the 16-bit page number & 8-bit offset variables\r\n#### writeByte(page, offset, data)\r\nWrites a byte of data to a specific location on a page. Takes the page number (0-maxPage), offset of data byte within page (0-255) and one byte of data as arguments.\r\n#### writeChar(page_number, offset, data)\r\nWrites a _char_ (signed 8 bit value) to a specific location on a page. Takes the page number (0-maxPage), the offset of the char within page (0-255) and one char of data  as arguments.\r\n#### writeWord(page_number, offset, data)\r\nWrites a _word_ (unsigned 16 bit value) to a specific location on a page. Takes the page number (0-maxPage), the offset of the word within page (0-255) and one word of data as arguments.\r\n#### writeShort(page_number, offset, data)\r\nWrites a _short_ (signed 16 bit value) to a specific location on a page. Takes the page number (0-maxPage), the offset of the short within page (0-255) and one short of data as arguments.\r\n#### writeULong(page_number, offset, data)\r\nWrites an _unsigned long_ (unsigned 32 bit value) to a specific location on a page. Takes the page number (0-maxPage), the offset of the unsigned long within page (0-255) and one unsigned long of data as arguments.\r\n#### writeLong(page_number, offset, data)\r\nWrites a _long_ (signed 32 bit value) to a specific location on a page. Takes the page number (0-maxPage), the offset of the long within page (0-255) and one long of data as arguments.\r\n#### writeFloat(page_number, offset, data)\r\nWrites a _float_ (decimal value) to a specific location on a page. Takes the page number (0-maxPage), the offset of the float within page (0-255) and one float of data as arguments.\r\n#### writeStr(page_number, offset, data)\r\nWrites a _string_ (String Object) to a specific location on a page. Takes the page number (0-maxPage), the offset of the String within page (0-255) and a String as arguments.\r\n#### writePage(page_number, *data_buffer)\r\nWrites a page worth of data into a data buffer array for further use. ```uint8_t data_buffer[256];``` The data buffer **must** be an array of 256 bytes.\r\n#### writeAnything(page_number, offset, value)\r\nWrites _any type of variable/struct_ (any sized value) from a specific location on a page. Takes the page number (0-maxPage), the offset of the data within page (0-255) and the variable/struct to write the data from, as arguments.\r\n<hr>\r\n### Continuous read/write commands\r\nAll write commands take a boolean last argument 'errorCheck'. This argument defaults to TRUE, but when set to FALSE will more than double the writing speed. This however comes at the cost of checking for writing errors. Use with care.\r\n\r\nAll read/write commands can take a 32-bit address variable instead of the 16-bit page number & 8-bit offset variables\r\n#### readBytes(page_number, offset, *data_buffer)\r\nReads an array of bytes starting from a specific location in a page. Takes the page number (0-maxPage), offset of data byte within page (0-255) and a data_buffer - i.e. an array of bytes to be read from the flash memory - as arguments. ```uint8_t data_buffer[n];``` The data buffer **must** be an array of n **bytes**. 'n' is determined by the amount of storage available on the Arduino board.\r\n#### writeBytes(page_number, offset, *data_buffer)\r\nWrites an array of bytes starting from a specific location in a page. Takes the page number (0-maxPage), offset of data byte within page (0-255) and a data_buffer - i.e. an array of bytes to be written to the flash memory - as arguments. ```uint8_t data_buffer[n];``` The data buffer **must** be an array of 'n' **bytes**. The number of bytes - 'n' - is determined by the amount of storage available on the Arduino board.\r\n<hr>\r\n### Erase commands\r\nAll erase commands can take a 32-bit address variable instead of the 16-bit page number & 8-bit offset variables\r\n#### eraseSector(page_number, offset)\r\nErases one 4KB sector - 16 pages - containing the page to be erased. The sectors are numbered 0 - 255 containing 16 pages each.\r\nPage 0-15 --> Sector 0; Page 16-31 --> Sector 1;......Page 4080-4095 --> Sector 255, and so on...\r\n#### eraseBlock32K(page_number, offset)\r\nErases one 32KB block - 128 pages - containing the page to be erased. The blocks are numbered 0 - 31 containing 128 pages each.\r\nPage 0-127 --> Block 0; Page 128-255 --> Block 1;......Page 3968-4095 --> Block 31, and so on...\r\n#### eraseBlock64K(page_number, offset)\r\nErases one 64KB block - 256 pages - containing the page to be erased. The blocks are numbered 0 - 15 containing 256 pages each.\r\n// Page 0-255 --> Block 0; Page 256-511 --> Block 1;......Page 3840-4095 --> Block 15, and so on...\r\n#### eraseChip()\r\nErases entire chip. Use with care.\r\n<hr>\r\n### Suspend/Resume commands\r\n#### suspendProg()\r\nSuspends current Block Erase/Sector Erase/Page Program. Does not suspend chipErase(). Page Program, Write Status Register, Erase instructions are not allowed. Erase suspend is only allowed during Block/Sector erase. Program suspend is only allowed during Page/Quad Page Program\r\n#### resumeProg()\r\nResumes previously suspended Block Erase/Sector Erase/Page Program.\r\n<hr>\r\n### Power operation commands\r\n#### powerDown()\r\nPuts device in low power state. Useful for battery powered operations. Typical current consumption during power-down is 1mA with a maximum of 5mA. (Datasheet 7.4). In powerDown() the chip will only respond to powerUp()\r\n#### powerUp()\r\n//Wakes chip from low power state.\r\n<hr>\r\n### Error codes explained\r\n\t- 0x00\tSUCCESS \t\tOperation successful.\r\n\t- 0x01\tCALLBEGIN\t\tPlease make sure .begin() has been called in setup().\r\n\t- 0x02\tUNKNOWNCHIP\tUnknown chip manufacturer.\r\n\t- 0x03\tUNKNOWNCAP\t\tUnknown chip capacity.\r\n\t- 0x04\tCHIPBUSY\t\tChip busy.\r\n\t- 0x05\tOUTOFBOUNDS\tAddress out of bounds. Please check if .begin() has been called in setup().\r\n\t- 0x06\tCANTENWRITE\t\tUnable to _writeEnable. Check wiring/chip.\r\n\t- 0x07\tOUTOFMEM\t\tPagenumber outside maximum.\r\n\t- 0x08\tOUTOFPAGE\t\tOffset is outside page.\r\n<hr>\r\n### Deprecated functions\r\n\r\nThe following functions are deprecated to enable compatibility with other AVR chips.\r\n`printPage();`\r\n`printAllPages()`\r\n`readSerialStr()`\r\n\r\nThey can be used by uncommenting them in the SPIFlash.cpp file. However, be warned, this particular block of code has only been tested with the Arduino\tIDE (1.6.5) and only with 8-bit ATMega based Arduino boards and will not be supported any further.\r\n\r\n#### printPage(page_number, outputType)\r\nReads a page worth of data into a data buffer array for further useand prints to a Serial stream at 115200 baud by default. (The baudrate can be changed by calling ```Serial.begin()``` at a different baudrate in ``` void setup()```)Setting an outputType of 1 enables output in hexadecimal while an outputType of 2 enables output in decimal, CSV - over Serial.\r\n\r\n#### printAllPages()\r\nReads all pages on Flash chip and dumps it to Serial stream. This function is useful when extracting data from a flash chip onto a computer as a text file.\r\n\r\n#### How to get data off Flash memory via Serial\r\n<sub>(Works only for Unix based Operating Systems)</sub>\r\n\r\n - Make sure you include code to let you dump entire flash memory/specific page's content to Serial (Refer to the code in the _TestFlash.h_ for details on how to do this)\r\n - Connect your arduino to the computer.\r\n - Open the Arduino IDE, the IDE's Serial Monitor, and an OSX POSIX terminal.\r\n - Type the following command into the terminal window. ```% tail -f /dev/tty.usbmodem1411 > FlashDump.txt``` Make sure to replace the _/dev/tty.usbmodem1411_ with the port your arduino is connected to. (You can find this in Tools --> Ports in Arduino IDE 1.6.x)\r\n - Then type the command to read all pages into the Serial console. If you use my code from the example file the command is ```read_all_pages```\r\n - Wait a few seconds before typing ```Ctrl+C``` to end the tail process\r\n - Check that you have actually recieved all the data by typing ```% cat FlashDump.txt```. This should output the entire textfile into your terminal window.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}